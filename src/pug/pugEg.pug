doctype 5
html(lang="en")
  head
    title Jade Template

    style.
      body {
        font-family: Verdana;
        font-size: 13px;
        background: #eee;
      }

      h1, h2, h3 { font-size: 22px; color: #464646; }
      h2 { font-size: 18px; }
      h3 { font-size: 14px; }

      a { color: #C2575B; text-decoration: none; }
      a:hover { color: #F76F76; }

  body
    h1 Jade Intro.

    p Clean and Classy!

    h2 Text and Comments
    p Text inside <em>paragraph</em> tag
    p
      | Multi
      | Line
    p.
      Another way for large
      bodies of text!

    // HTML Comments visible in HTML source
    //- Invisible comments - Jade specific
    // block comments
      | this piece of text won't be visible.
      | as this is part of the HTML block comments.

    h2 IDs and Classes

    #content
      p.description `p` with a class of description inside a `div` with an id of content. You can simply omit the div btw.

    h2 Attributes
    // for boolean attributes you can pass true/false or omit them
    // Multi lines ?
    // No commas ?
    input(type="checkbox"
      name="terms"
      checked)

    h2 Nesting
    // We will do some nesting now
      | Lesser nesting ? ok .. cool!

    ul#menu
      li: a(href="#target1", title="Home") Home
      li: a(href="#target2", title="Contact") Contact

    h2 Variables and Escaping
    // Ok .. time to learn the real stuff now!
      | Let's say you passed some variables to this template
      | from your Node.js code. Since we don't have a node.js setup
      | we're going to set the variables inside here.
      | yes! you can define variables in jade templates!

      | want more text in the heading ?
      | arrays ? objects ?

      | One thing to remember though. Jade will html escape
      | the contents of \#{}. If you want unescaped content
      | use \!{}
      | Also notice i escaped all interpolation tokens in this
      | block comment, else Jade would think that it needs to
      | do some string interpolation and throw errors!

      | That's all for now! In the next part I am going to
      | show you some other features like conditionals, mixins
      | and loops.

    -my_var = {name: 'Jade', type: 'templating engine'}
    h3 #{my_var.name} is a #{my_var.type}

// Let's first see how to inject JS logic into your JADE templates
// JADE supports its own constructs for conditionals and loops to make your templates cleaner :) Let's see it in action!

- var users = [{name: 'foo', role: 'admin'}, {name: 'bar', role: 'manager'}, {name: 'baz', role: 'technician'}]

h2 Users

// Neat! There's another construct called `each`
// Also there is `unless` which is equivalent to if (!expr)
// Let's use that and swap a bit of code

each user, index in users
  unless user.role === 'admin'
    p #{user.name} is not an "admin"
  else
    p #{user.name} is an "admin"

// Let's take a look at `case` statements now

h3 case

case users[2].role
  when 'admin'
    p User is an admin
  when 'manager'
    p User is a manager
  when 'technician'
    p User is a technician
  default
    p User is a customer!

h3 mixins

// mixins are pieces of code that you can reuse as functions. they may or may not accept arguments

mixin fruits
  ul
    li Apple
    li Banana
    li Orange

h2 Fruits

+fruits

mixin users(name, role)
  li(attributes) #{name} has a role of #{role}

// Another way to call mixins that provides with a few extra features that you're going to see in a second.
// The attributes, id, class have been added to the li's. You can style them from CSS now.

+users(users[0].name, users[0].role)#admin
+users(users[1].name, users[1].role).manager
+users(users[2].name, users[2].role)(title="technician")

// Mixins are excellent for dropdowns

mixin user_list(name)
  option(value="#{name}") #{name}

select
  for user in users
    +user_list(user.name)

// Great! Now finally let's take a look at "filters". filters must be prefixed with ':',
// for example ':coffeescript' or ':markdown'. Jade currently supports :stylus, :less, :markdown, :cdata and :coffeescript.
// Let's see how to use the coffee filter.

//- //- :coffeescript
//- //-   (->
//- //-     document.querySelectorAll('.manager')[0].style.color = 'blue'
//- //-   )()

//- // Some random piece of code but you get the idea :)
//- // That's all!
